// Um papel dos testes unitÃ¡rios Ã© nos ajudar a implementar funÃ§Ãµes mais robustas. Veja, por exemplo, a funÃ§Ã£o que realiza a divisÃ£o utilizada no modelo anterior:

function division(x, y) {
  return x / y;
}

// O que acontece se criarmos o teste abaixo?

const assert = require('assert');

// declaraÃ§Ã£o da funÃ§Ã£o division, definida anteriormente...

assert.equal(division(10, 2), 5); // OK
assert.equal(division(10, 0), 0); // ðŸ’£

// O primeiro assert.equal funciona e nÃ£o apresenta erro, mas o segundo deixa evidente uma fragilidade na implementaÃ§Ã£o da funÃ§Ã£o division, pois nÃ£o poderia ser possÃ­vel realizar a divisÃ£o por 0. Nesse caso, devemos melhorar a implementaÃ§Ã£o da funÃ§Ã£o division, a fim de nÃ£o termos mais esse estado inconsistente.

const assert = require('assert');

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}

assert.equal(division(10, 2), 5); // OK
assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK