# time_complexity AND memory_complexity

constant_complexity = "0(1)"
# Uma O(1) executa no mesmo tempo independente do tamanho da entrada. Como exemplo, lembre-se do acesso a um elemento do array , estudado na aula de ontem. Esse acesso √© O(1) , pois leva o mesmo tempo, independente do tamanho do array;

linear_complexity__assintoic_complexity = "f(n) = n OU 0(n)"
# Uma O(n) significa que o algoritmo √© linear : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execu√ß√£o em 2 vezes ;

squared_complexity = "0(n¬≤)"
# Uma O(n¬≤) significa que o algoritmo √© quadr√°tico : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execu√ß√£o em 4 (2¬≤) vezes ;

cubic_complexity = "0(n¬≥)"
# Uma O(n¬≥) significa que o algoritmo √© c√∫bico : se aumentamos a entrada em 2 vezes , aumentamos o tempo de execu√ß√£o em 8 (2¬≥) vezes .

logarhitmic_complexity = "0(log n)"

exponencial_complexity = ""

fatorial_complexity = ""


# üí° Quando calculamos a complexidade de espa√ßo n√£o levamos em considera√ß√£o o espa√ßo ocupado pela entrada! O tamanho da entrada n√£o √© algo que podemos, com nosso algoritmo, influenciar, ent√£o ele n√£o entra em nossos c√°lculos.
